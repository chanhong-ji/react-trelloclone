{"version":3,"sources":["atoms.tsx","components/DraggableCard.tsx","components/Board.tsx","components/Header.tsx","components/Trello.tsx","theme.ts","App.tsx","index.tsx"],"names":["todosState","atom","key","default","JSON","parse","localStorage","getItem","stringify","Doing","Done","boardState","isDarkState","Svg","styled","svg","Card","div","p","theme","color","border","props","isDragging","bg","DraggableCard","todoText","todoId","index","boardId","setTodoBoards","useSetRecoilState","onDelete","allBoards","targetBoard","splice","draggableId","provided","info","ref","innerRef","draggableProps","dragHandleProps","focusable","role","xmlns","viewBox","className","onClick","fill","d","React","memo","Container","board","Title","h2","accent","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","todos","setTodos","useForm","register","handleSubmit","setValue","onValid","todo","newTodo","id","Date","now","text","prevBoards","onSubmit","required","placeholder","droppableId","type","droppableProps","Boolean","draggingFromThisWith","map","Column","CategoryForm","Wrapper","header","input","Header","useRecoilState","todoBoards","setBoards","errors","formState","setError","clearErrors","onCategorySubmit","category","message","shouldFocus","maxLength","onChange","Boards","Trash","Trello","boards","useEffect","setItem","onDragEnd","source","destination","copiedBoards","prev","filter","movedBoard","copiedBoard","targetTodo","fromBoard","toBoard","direction","style","display","darkTheme","lightTheme","GlobalStyle","createGlobalStyle","App","isDark","useRecoilValue","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.db58c691.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\nconst defaultBoard = {\r\n  \"To Do\": [],\r\n  Doing: [],\r\n  Done: [],\r\n};\r\n\r\nexport interface ITodo {\r\n  id: number;\r\n  text: string;\r\n}\r\n\r\ninterface ITodos {\r\n  [key: string]: ITodo[];\r\n}\r\n\r\nexport const todosState = atom<ITodos>({\r\n  key: \"todos\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"todoBoards\") || JSON.stringify(defaultBoard)\r\n  ),\r\n});\r\n\r\nexport const boardState = atom<string[]>({\r\n  key: \"boardState\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"boards\") || JSON.stringify([\"To Do\", \"Doing\", \"Done\"])\r\n  ),\r\n});\r\n\r\nexport const isDarkState = atom<boolean>({\r\n  key: \"isDarkState\",\r\n  default: true,\r\n});\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { todosState } from \"../atoms\";\r\n\r\nconst Svg = styled.svg``;\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  border: 1px solid ${(p) => p.theme.color.border};\r\n  background-color: ${(props) =>\r\n    props.isDragging ? \"#e4f2ff\" : props.theme.color.bg};\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\r\n  width: 100%;\r\n  word-break: break-all;\r\n  span {\r\n    width: 90%;\r\n  }\r\n  ${Svg} {\r\n    width: 15px;\r\n    height: 15px;\r\n    color: rgba(0, 0, 0, 0.1);\r\n    :hover {\r\n      color: rgba(0, 0, 0, 0.5);\r\n    }\r\n  }\r\n`;\r\n\r\ninterface IDraggableCard {\r\n  todoText: string;\r\n  todoId: number;\r\n  index: number;\r\n  boardId: string;\r\n}\r\n\r\nconst DraggableCard = ({\r\n  todoText,\r\n  todoId,\r\n  index,\r\n  boardId,\r\n}: IDraggableCard) => {\r\n  const setTodoBoards = useSetRecoilState(todosState);\r\n\r\n  function onDelete() {\r\n    setTodoBoards((allBoards) => {\r\n      const targetBoard = [...allBoards[boardId]];\r\n      targetBoard.splice(index, 1);\r\n      return { ...allBoards, [boardId]: targetBoard };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Draggable index={index} draggableId={todoId + \"\"}>\r\n      {(provided, info) => {\r\n        return (\r\n          <Card\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            isDragging={info.isDragging}\r\n          >\r\n            <span>{todoText}</span>\r\n            <Svg\r\n              aria-hidden='true'\r\n              focusable='false'\r\n              data-prefix='fas'\r\n              data-icon='trash'\r\n              role='img'\r\n              xmlns='http://www.w3.org/2000/svg'\r\n              viewBox='0 0 448 512'\r\n              className='svg-inline--fa fa-trash fa-w-14 fa-3x'\r\n              onClick={onDelete}\r\n            >\r\n              <path\r\n                fill='currentColor'\r\n                d='M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z'\r\n              ></path>\r\n            </Svg>\r\n          </Card>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(DraggableCard);\r\n","import React from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { FaCheck } from \"react-icons/fa\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { ITodo, todosState } from \"../atoms\";\r\nimport DraggableCard from \"./DraggableCard\";\r\n\r\nconst Container = styled.div<{ isDragging: boolean }>`\r\n  width: 300px;\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  background-color: ${(p) => p.theme.color.board};\r\n  opacity: ${(p) => (p.isDragging ? 0.7 : 1)};\r\n  border: 1px solid ${(p) => p.theme.color.border};\r\n`;\r\n\r\nconst Title = styled.h2<{ isDragging: boolean }>`\r\n  text-align: center;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  font-size: 25px;\r\n  background-color: ${(p) =>\r\n    p.isDragging ? p.theme.color.accent : \"transparent\"};\r\n  color: ${(p) => (p.isDragging ? \"white\" : p.theme.color.accent)};\r\n`;\r\n\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#dfe6e9\"\r\n      : props.isDraggingFromThis\r\n      ? \"#b2bec3\"\r\n      : \"transparent\"};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 0 20px;\r\n  input {\r\n    width: 100%;\r\n    height: 35px;\r\n    border: 1px solid ${(p) => p.theme.color.border};\r\n    border-radius: 6px;\r\n    padding-left: 10px;\r\n    outline-color: rgba(0, 0, 0, 0.4);\r\n    font-size: 15px;\r\n    ::placeholder {\r\n      color: rgba(0, 0, 0, 0.4);\r\n    }\r\n  }\r\n  .submit {\r\n    color: ${(p) => p.theme.color.accent};\r\n    opacity: 0.7;\r\n    margin-left: 10px;\r\n  }\r\n`;\r\ninterface IBoardProps {\r\n  todos: ITodo[];\r\n  boardId: string;\r\n  index: number;\r\n}\r\n\r\ninterface IAreaProps {\r\n  isDraggingOver: boolean;\r\n  isDraggingFromThis: boolean;\r\n}\r\n\r\ninterface IForm {\r\n  todo: string;\r\n}\r\n\r\nconst Board = ({ todos, boardId, index }: IBoardProps) => {\r\n  const setTodos = useSetRecoilState(todosState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n  function onValid({ todo }: IForm) {\r\n    const newTodo = {\r\n      id: Date.now(),\r\n      text: todo,\r\n    };\r\n    setTodos((prevBoards) => {\r\n      return {\r\n        ...prevBoards,\r\n        [boardId]: [...prevBoards[boardId], newTodo],\r\n      };\r\n    });\r\n    setValue(\"todo\", \"\");\r\n  }\r\n\r\n  return (\r\n    <Draggable draggableId={boardId} index={index}>\r\n      {(provided, info) => (\r\n        <Container\r\n          ref={provided.innerRef}\r\n          {...provided.draggableProps}\r\n          isDragging={info.isDragging}\r\n        >\r\n          <Title {...provided.dragHandleProps} isDragging={info.isDragging}>\r\n            {boardId}\r\n          </Title>\r\n          <Form onSubmit={handleSubmit(onValid)}>\r\n            <input\r\n              {...register(\"todo\", { required: \"Required\" })}\r\n              placeholder='Write Todo...'\r\n            />\r\n            <FaCheck className='submit' onClick={handleSubmit(onValid)} />\r\n          </Form>\r\n          <Droppable droppableId={boardId} type='card'>\r\n            {(provided, info) => (\r\n              <Area\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                isDraggingOver={info.isDraggingOver}\r\n                isDraggingFromThis={Boolean(info.draggingFromThisWith)}\r\n              >\r\n                {todos.map((todo, index) => (\r\n                  <DraggableCard\r\n                    todoText={todo.text}\r\n                    todoId={todo.id}\r\n                    index={index}\r\n                    key={todo.id}\r\n                    boardId={boardId}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </Area>\r\n            )}\r\n          </Droppable>\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n","import styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { boardState, todosState } from \"../atoms\";\r\nimport { FaCheck, FaCheckCircle } from \"react-icons/fa\";\r\n\r\nconst Column = styled.div``;\r\nconst CategoryForm = styled.form``;\r\nconst Wrapper = styled.div`\r\n  position: fixed;\r\n  width: 100%;\r\n  height: 70px;\r\n  background-color: ${(p) => p.theme.color.header};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 0 30px;\r\n  ${Column} {\r\n    display: flex;\r\n    align-items: center;\r\n    .icon {\r\n      font-size: 30px;\r\n    }\r\n    span {\r\n      font-size: 30px;\r\n      color: ${(p) => p.theme.color.bg};\r\n      margin-left: 10px;\r\n    }\r\n    ${CategoryForm} {\r\n      display: flex;\r\n      align-items: center;\r\n      input {\r\n        margin-left: 10px;\r\n        height: 40px;\r\n        width: 200px;\r\n        border-radius: 20px;\r\n        background: none;\r\n        border: none;\r\n        background-color: ${(p) => p.theme.color.input};\r\n        padding-left: 20px;\r\n        margin: 0 10px;\r\n        font-size: 17px;\r\n        outline-color: rgba(0, 0, 0, 0.4);\r\n        ::placeholder {\r\n          color: ${(p) => p.theme.color.accent};\r\n        }\r\n      }\r\n      span {\r\n        font-size: 20px;\r\n      }\r\n      .submit {\r\n        font-size: 20px;\r\n        color: white;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\ninterface ICategoryForm {\r\n  category: string;\r\n}\r\n\r\nfunction Header() {\r\n  const [todoBoards, setTodoBoards] = useRecoilState(todosState);\r\n  const setBoards = useSetRecoilState(boardState);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n    setError,\r\n    clearErrors,\r\n  } = useForm();\r\n\r\n  function onCategorySubmit({ category }: ICategoryForm) {\r\n    if (category in todoBoards) {\r\n      setError(\"category\", { message: \"Already exist\" }, { shouldFocus: true });\r\n      return;\r\n    }\r\n    setTodoBoards((prevBoards) => ({ ...prevBoards, [category]: [] }));\r\n    setBoards((prevBoards) => [...prevBoards, category]);\r\n    setValue(\"category\", \"\");\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <Column>\r\n        <FaCheckCircle color='white' className='icon' />\r\n        <span>Todos</span>\r\n      </Column>\r\n      <Column>\r\n        <CategoryForm onSubmit={handleSubmit(onCategorySubmit)}>\r\n          <span>{errors?.category?.message}</span>\r\n          <input\r\n            {...register(\"category\", {\r\n              required: true,\r\n              maxLength: 18,\r\n              onChange: () => clearErrors(),\r\n            })}\r\n            placeholder='New category'\r\n            maxLength={18}\r\n          />\r\n          <FaCheck\r\n            className='submit'\r\n            onClick={handleSubmit(onCategorySubmit)}\r\n          />\r\n        </CategoryForm>\r\n      </Column>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import { useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { boardState, todosState } from \"../atoms\";\r\nimport Board from \"./Board\";\r\nimport Header from \"./Header\";\r\n\r\nconst Container = styled.div`\r\n  width: fit-content;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-top: 100px;\r\n  padding-bottom: 50px;\r\n`;\r\n\r\nconst Boards = styled.div<{ isDraggingOver: boolean }>`\r\n  display: flex;\r\n  min-width: 100vw;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding-left: 10px;\r\n  gap: 10px;\r\n  position: relative;\r\n  /* background-color: ${(p) =>\r\n    p.isDraggingOver ? p.theme.color.board : \"transparent\"}; */\r\n`;\r\n\r\nconst Trash = styled.div<{ isDraggingOver: boolean }>`\r\n  margin-top: 50px;\r\n  width: 300px;\r\n  display: flex;\r\n  justify-content: center;\r\n  svg {\r\n    color: ${(p) =>\r\n      p.isDraggingOver ? p.theme.color.accent : \"rgba(0, 0, 0, 0.1)\"};\r\n  }\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  width: 50px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Trello = () => {\r\n  const [todoBoards, setTodoBoards] = useRecoilState(todosState);\r\n  const [boards, setBoards] = useRecoilState(boardState);\r\n\r\n  function onDragEnd({ source, destination, type }: DropResult) {\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (type === \"board\") {\r\n      if (destination.droppableId === \"trash\") {\r\n        setTodoBoards((prevBoards) => {\r\n          const copiedBoards = { ...prevBoards };\r\n          delete copiedBoards[boards[source.index]];\r\n          return copiedBoards;\r\n        });\r\n        setBoards((prev) => {\r\n          return prev.filter((board) => board !== prev[source.index]);\r\n        });\r\n      } else {\r\n        setBoards((boards) => {\r\n          const copiedBoards = [...boards];\r\n          const movedBoard = copiedBoards.splice(source.index, 1);\r\n          copiedBoards.splice(destination.index, 0, movedBoard[0]);\r\n          return copiedBoards;\r\n        });\r\n      }\r\n    } else {\r\n      if (source.droppableId === destination?.droppableId) {\r\n        setTodoBoards((allBoards) => {\r\n          const copiedBoard = [...allBoards[source.droppableId]];\r\n          const targetTodo = copiedBoard.splice(source.index, 1);\r\n          copiedBoard.splice(destination.index, 0, targetTodo[0]);\r\n          return {\r\n            ...allBoards,\r\n            [source.droppableId]: copiedBoard,\r\n          };\r\n        });\r\n      } else {\r\n        setTodoBoards((allBoards) => {\r\n          const fromBoard = [...allBoards[source.droppableId]];\r\n          const toBoard = [...allBoards[destination.droppableId]];\r\n          const targetTodo = fromBoard.splice(source.index, 1);\r\n          toBoard.splice(destination?.index, 0, targetTodo[0]);\r\n          return {\r\n            ...allBoards,\r\n            [source.droppableId]: fromBoard,\r\n            [destination.droppableId]: toBoard,\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoBoards\", JSON.stringify(todoBoards));\r\n  }, [todoBoards]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\r\n  }, [boards]);\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <DragDropContext onDragEnd={onDragEnd}>\r\n        <Container>\r\n          <Droppable droppableId='boards' direction='horizontal' type='board'>\r\n            {(provided, info) => {\r\n              return (\r\n                <Boards\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  isDraggingOver={info.isDraggingOver}\r\n                >\r\n                  {boards.map((boardId, index) => (\r\n                    <Board\r\n                      boardId={boardId}\r\n                      todos={todoBoards[boardId]}\r\n                      key={boardId}\r\n                      index={index}\r\n                    />\r\n                  ))}\r\n                  {provided.placeholder}\r\n                </Boards>\r\n              );\r\n            }}\r\n          </Droppable>\r\n          <Droppable droppableId='trash' type='board'>\r\n            {(provided, info) => {\r\n              return (\r\n                <Trash\r\n                  ref={provided.innerRef}\r\n                  {...provided.droppableProps}\r\n                  isDraggingOver={info.isDraggingOver}\r\n                >\r\n                  <Svg\r\n                    aria-hidden='true'\r\n                    focusable='false'\r\n                    data-prefix='fas'\r\n                    data-icon='trash'\r\n                    role='img'\r\n                    xmlns='http://www.w3.org/2000/svg'\r\n                    viewBox='0 0 448 512'\r\n                    className='svg-inline--fa fa-trash fa-w-14 fa-3x'\r\n                  >\r\n                    <path\r\n                      fill='currentColor'\r\n                      d='M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z'\r\n                    ></path>\r\n                  </Svg>\r\n                  <div style={{ display: \"none\" }}>{provided.placeholder}</div>\r\n                </Trash>\r\n              );\r\n            }}\r\n          </Droppable>\r\n        </Container>\r\n      </DragDropContext>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Trello;\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  color: {\r\n    accent: \"#3882e5\",\r\n    border: \"rgba(0, 0, 0, 0.1)\",\r\n    bg: \"white\",\r\n    text: \"rgba(0, 0, 0, 0.8)\",\r\n    board: \"whitesmoke\",\r\n    header: \"#3882e5\",\r\n    input: \"rgba(255,255,255,0.4)\",\r\n  },\r\n};\r\n\r\nexport const lightTheme: DefaultTheme = {\r\n  color: {\r\n    accent: \"#3882e5\",\r\n    border: \"rgba(0, 0, 0, 0.3)\",\r\n    bg: \"white\",\r\n    text: \"rgba(0, 0, 0, 0.8)\",\r\n    board: \"white\",\r\n    header: \"white\",\r\n    input: \"rgba(243, 249, 255)\",\r\n  },\r\n};\r\n","import Trello from \"./components/Trello\";\r\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { isDarkState } from \"./atoms\";\r\nimport { darkTheme, lightTheme } from \"./theme\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  color:black;\r\n  line-height: 1.2;\r\n  background-color: ${(p) => p.theme.color.bg};\r\n  position: relative;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  const isDark = useRecoilValue(isDarkState);\r\n  return (\r\n    <ThemeProvider theme={isDark ? darkTheme : lightTheme}>\r\n      <GlobalStyle />\r\n      <Trello />;\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}