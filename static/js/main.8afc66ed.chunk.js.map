{"version":3,"sources":["theme.ts","atoms.tsx","components/DraggableCard.tsx","components/Board.tsx","Trello.tsx","App.tsx","index.tsx"],"names":["darkTheme","bgColor","boardColor","cardColor","todosState","atom","key","default","JSON","parse","localStorage","getItem","stringify","Doing","Done","boardState","Card","styled","div","props","isDragging","theme","Svg","svg","DraggableCard","todoText","todoId","index","boardId","setTodoBoards","useSetRecoilState","onDelete","allBoards","targetBoard","splice","draggableId","provided","info","ref","innerRef","draggableProps","dragHandleProps","focusable","role","xmlns","viewBox","className","onClick","fill","d","React","memo","Container","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","todos","setTodos","useForm","register","handleSubmit","setValue","onValid","todo","newTodo","id","Date","now","text","prevBoards","onSubmit","required","placeholder","droppableId","type","droppableProps","Boolean","draggingFromThisWith","map","CategoryForm","Boards","Trash","Trello","useRecoilState","todoBoards","boards","setBoards","useEffect","setItem","errors","formState","setError","onDragEnd","source","destination","copiedBoards","prev","filter","board","movedBoard","copiedBoard","targetTodo","fromBoard","toBoard","category","message","shouldFocus","htmlFor","minLength","direction","style","display","GlobalStyle","createGlobalStyle","App","basename","process","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8afc66ed.chunk.js","sourcesContent":["import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"grey\",\r\n  boardColor: \"skyblue\",\r\n  cardColor: \"whitesmoke\",\r\n};\r\n","import { atom } from \"recoil\";\r\n\r\nconst defaultBoard = {\r\n  \"To Do\": [],\r\n  Doing: [],\r\n  Done: [],\r\n};\r\n\r\nexport interface ITodo {\r\n  id: number;\r\n  text: string;\r\n}\r\n\r\ninterface ITodos {\r\n  [key: string]: ITodo[];\r\n}\r\n\r\nexport const todosState = atom<ITodos>({\r\n  key: \"todos\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"todoBoards\") || JSON.stringify(defaultBoard)\r\n  ),\r\n});\r\n\r\nexport const boardState = atom<string[]>({\r\n  key: \"boardState\",\r\n  default: JSON.parse(\r\n    localStorage.getItem(\"boards\") || JSON.stringify([\"To Do\", \"Doing\", \"Done\"])\r\n  ),\r\n});\r\n","import React from \"react\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { todosState } from \"../atoms\";\r\n\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  background-color: ${(props) =>\r\n    props.isDragging ? \"#e4f2ff\" : props.theme.cardColor};\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? \"0px 2px 5px rgba(0, 0, 0, 0.05)\" : \"none\"};\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  width: 15px;\r\n  height: 15px;\r\n  color: rgba(0, 0, 0, 0.1);\r\n  :hover {\r\n    color: rgba(0, 0, 0, 0.5);\r\n  }\r\n`;\r\n\r\ninterface IDraggableCard {\r\n  todoText: string;\r\n  todoId: number;\r\n  index: number;\r\n  boardId: string;\r\n}\r\n\r\nconst DraggableCard = ({\r\n  todoText,\r\n  todoId,\r\n  index,\r\n  boardId,\r\n}: IDraggableCard) => {\r\n  const setTodoBoards = useSetRecoilState(todosState);\r\n\r\n  function onDelete() {\r\n    setTodoBoards((allBoards) => {\r\n      const targetBoard = [...allBoards[boardId]];\r\n      targetBoard.splice(index, 1);\r\n      return { ...allBoards, [boardId]: targetBoard };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Draggable index={index} draggableId={todoId + \"\"}>\r\n      {(provided, info) => {\r\n        return (\r\n          <Card\r\n            ref={provided.innerRef}\r\n            {...provided.draggableProps}\r\n            {...provided.dragHandleProps}\r\n            isDragging={info.isDragging}\r\n          >\r\n            {todoText}\r\n            <Svg\r\n              aria-hidden=\"true\"\r\n              focusable=\"false\"\r\n              data-prefix=\"fas\"\r\n              data-icon=\"trash\"\r\n              role=\"img\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 448 512\"\r\n              className=\"svg-inline--fa fa-trash fa-w-14 fa-3x\"\r\n              onClick={onDelete}\r\n            >\r\n              <path\r\n                fill=\"currentColor\"\r\n                d=\"M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z\"\r\n              ></path>\r\n            </Svg>\r\n          </Card>\r\n        );\r\n      }}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(DraggableCard);\r\n","import React from \"react\";\r\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { ITodo, todosState } from \"../atoms\";\r\nimport DraggableCard from \"./DraggableCard\";\r\n\r\nconst Container = styled.div`\r\n  width: 300px;\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n  border: 2px solid rgba(0, 0, 0, 0.3);\r\n`;\r\n\r\nconst Title = styled.h2<{ isDragging: boolean }>`\r\n  text-align: center;\r\n  font-weight: 500;\r\n  margin-bottom: 10px;\r\n  padding: 10px;\r\n  font-size: 18px;\r\n  background-color: ${(props) =>\r\n    props.isDragging ? \"rgba(0, 0, 0, 0.6)\" : \"transparent\"};\r\n  color: ${(props) => (props.isDragging ? \"white\" : \"inherit\")};\r\n`;\r\n\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#dfe6e9\"\r\n      : props.isDraggingFromThis\r\n      ? \"#b2bec3\"\r\n      : \"transparent\"};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  padding: 0 20px;\r\n  input {\r\n    width: 100%;\r\n    height: 30px;\r\n    border: none;\r\n  }\r\n  button {\r\n    background: none;\r\n    border: none;\r\n    background-color: rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\ninterface IBoardProps {\r\n  todos: ITodo[];\r\n  boardId: string;\r\n  index: number;\r\n}\r\n\r\ninterface IAreaProps {\r\n  isDraggingOver: boolean;\r\n  isDraggingFromThis: boolean;\r\n}\r\n\r\ninterface IForm {\r\n  todo: string;\r\n}\r\n\r\nconst Board = ({ todos, boardId, index }: IBoardProps) => {\r\n  const setTodos = useSetRecoilState(todosState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n  function onValid({ todo }: IForm) {\r\n    const newTodo = {\r\n      id: Date.now(),\r\n      text: todo,\r\n    };\r\n    setTodos((prevBoards) => {\r\n      return {\r\n        ...prevBoards,\r\n        [boardId]: [...prevBoards[boardId], newTodo],\r\n      };\r\n    });\r\n    setValue(\"todo\", \"\");\r\n  }\r\n\r\n  return (\r\n    <Draggable draggableId={boardId} index={index}>\r\n      {(provided, info) => (\r\n        <Container ref={provided.innerRef} {...provided.draggableProps}>\r\n          <Title {...provided.dragHandleProps} isDragging={info.isDragging}>\r\n            {boardId}\r\n          </Title>\r\n          <Form onSubmit={handleSubmit(onValid)}>\r\n            <input\r\n              {...register(\"todo\", { required: \"Required\" })}\r\n              placeholder=\"Write Todo...\"\r\n            />\r\n            <button>Create</button>\r\n          </Form>\r\n          <Droppable droppableId={boardId} type=\"card\">\r\n            {(provided, info) => (\r\n              <Area\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                isDraggingOver={info.isDraggingOver}\r\n                isDraggingFromThis={Boolean(info.draggingFromThisWith)}\r\n              >\r\n                {todos.map((todo, index) => (\r\n                  <DraggableCard\r\n                    todoText={todo.text}\r\n                    todoId={todo.id}\r\n                    index={index}\r\n                    key={todo.id}\r\n                    boardId={boardId}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </Area>\r\n            )}\r\n          </Droppable>\r\n        </Container>\r\n      )}\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Board);\r\n","import { useEffect } from \"react\";\r\nimport { DragDropContext, Droppable, DropResult } from \"react-beautiful-dnd\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport styled from \"styled-components\";\r\nimport { boardState, todosState } from \"./atoms\";\r\nimport Board from \"./components/Board\";\r\n\r\nconst Container = styled.div`\r\n  height: 100vh;\r\n  width: fit-content;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-top: 100px;\r\n  padding-bottom: 50px;\r\n`;\r\n\r\nconst CategoryForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  position: absolute;\r\n  top: 10px;\r\n  left: 10px;\r\n`;\r\n\r\ninterface ICategoryForm {\r\n  category: string;\r\n}\r\n\r\nconst Boards = styled.div<{ isDraggingOver: boolean }>`\r\n  display: flex;\r\n  min-width: 100vw;\r\n  justify-content: flex-start;\r\n  align-items: flex-start;\r\n  padding-left: 10px;\r\n  gap: 10px;\r\n  position: relative;\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver ? \"whiteSmoke\" : \"transparent\"};\r\n`;\r\n\r\nconst Trash = styled.div<{ isDraggingOver: boolean }>`\r\n  margin-top: 50px;\r\n  width: 300px;\r\n  display: flex;\r\n  justify-content: center;\r\n  svg {\r\n    color: ${(props) => (props.isDraggingOver ? \"grey\" : \"rgba(0, 0, 0, 0.1)\")};\r\n  }\r\n`;\r\n\r\nconst Svg = styled.svg`\r\n  width: 50px;\r\n  height: 50px;\r\n`;\r\n\r\nconst Trello = () => {\r\n  const [todoBoards, setTodoBoards] = useRecoilState(todosState);\r\n  const [boards, setBoards] = useRecoilState(boardState);\r\n\r\n  function onDragEnd({ source, destination, type }: DropResult) {\r\n    if (!destination) {\r\n      return;\r\n    }\r\n    if (type === \"board\") {\r\n      if (destination.droppableId === \"trash\") {\r\n        setTodoBoards((prevBoards) => {\r\n          const copiedBoards = { ...prevBoards };\r\n          delete copiedBoards[boards[source.index]];\r\n          return copiedBoards;\r\n        });\r\n        setBoards((prev) => {\r\n          return prev.filter((board) => board !== prev[source.index]);\r\n        });\r\n      } else {\r\n        setBoards((boards) => {\r\n          const copiedBoards = [...boards];\r\n          const movedBoard = copiedBoards.splice(source.index, 1);\r\n          copiedBoards.splice(destination.index, 0, movedBoard[0]);\r\n          return copiedBoards;\r\n        });\r\n      }\r\n    } else {\r\n      if (source.droppableId === destination?.droppableId) {\r\n        setTodoBoards((allBoards) => {\r\n          const copiedBoard = [...allBoards[source.droppableId]];\r\n          const targetTodo = copiedBoard.splice(source.index, 1);\r\n          copiedBoard.splice(destination.index, 0, targetTodo[0]);\r\n          return {\r\n            ...allBoards,\r\n            [source.droppableId]: copiedBoard,\r\n          };\r\n        });\r\n      } else {\r\n        setTodoBoards((allBoards) => {\r\n          const fromBoard = [...allBoards[source.droppableId]];\r\n          const toBoard = [...allBoards[destination.droppableId]];\r\n          const targetTodo = fromBoard.splice(source.index, 1);\r\n          toBoard.splice(destination?.index, 0, targetTodo[0]);\r\n          return {\r\n            ...allBoards,\r\n            [source.droppableId]: fromBoard,\r\n            [destination.droppableId]: toBoard,\r\n          };\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"todoBoards\", JSON.stringify(todoBoards));\r\n  }, [todoBoards]);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"boards\", JSON.stringify(boards));\r\n  }, [boards]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setValue,\r\n    formState: { errors },\r\n    setError,\r\n  } = useForm();\r\n\r\n  function onCategorySubmit({ category }: ICategoryForm) {\r\n    if (category in todoBoards) {\r\n      setError(\"category\", { message: \"Already exist\" }, { shouldFocus: true });\r\n      return;\r\n    }\r\n    setTodoBoards((prevBoards) => ({ ...prevBoards, [category]: [] }));\r\n    setBoards((prevBoards) => [...prevBoards, category]);\r\n    setValue(\"category\", \"\");\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <Container>\r\n        <CategoryForm onSubmit={handleSubmit(onCategorySubmit)}>\r\n          <label htmlFor=\"category\">New Category</label>\r\n          <input {...register(\"category\", { required: true, minLength: 2 })} />\r\n          <span>{errors?.category?.message}</span>\r\n          <button>Create</button>\r\n        </CategoryForm>\r\n        <Droppable droppableId=\"boards\" direction=\"horizontal\" type=\"board\">\r\n          {(provided, info) => {\r\n            return (\r\n              <Boards\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                isDraggingOver={info.isDraggingOver}\r\n              >\r\n                {boards.map((boardId, index) => (\r\n                  <Board\r\n                    boardId={boardId}\r\n                    todos={todoBoards[boardId]}\r\n                    key={boardId}\r\n                    index={index}\r\n                  />\r\n                ))}\r\n                {provided.placeholder}\r\n              </Boards>\r\n            );\r\n          }}\r\n        </Droppable>\r\n        <Droppable droppableId=\"trash\" type=\"board\">\r\n          {(provided, info) => {\r\n            return (\r\n              <Trash\r\n                ref={provided.innerRef}\r\n                {...provided.droppableProps}\r\n                isDraggingOver={info.isDraggingOver}\r\n              >\r\n                <Svg\r\n                  aria-hidden=\"true\"\r\n                  focusable=\"false\"\r\n                  data-prefix=\"fas\"\r\n                  data-icon=\"trash\"\r\n                  role=\"img\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 448 512\"\r\n                  className=\"svg-inline--fa fa-trash fa-w-14 fa-3x\"\r\n                >\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M432 32H312l-9.4-18.7A24 24 0 0 0 281.1 0H166.8a23.72 23.72 0 0 0-21.4 13.3L136 32H16A16 16 0 0 0 0 48v32a16 16 0 0 0 16 16h416a16 16 0 0 0 16-16V48a16 16 0 0 0-16-16zM53.2 467a48 48 0 0 0 47.9 45h245.8a48 48 0 0 0 47.9-45L416 128H32z\"\r\n                  ></path>\r\n                </Svg>\r\n                <div style={{ display: \"none\" }}>{provided.placeholder}</div>\r\n              </Trash>\r\n            );\r\n          }}\r\n        </Droppable>\r\n      </Container>\r\n    </DragDropContext>\r\n  );\r\n};\r\n\r\nexport default Trello;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport { createGlobalStyle, ThemeProvider } from \"styled-components\";\r\nimport { darkTheme } from \"./theme\";\r\nimport Trello from \"./Trello\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Nunito:wght@200;300;400;500;800&family=Rubik:wght@500&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration: none;\r\n  color: inherit;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <GlobalStyle />\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Trello />\r\n            </Route>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { RecoilRoot } from \"recoil\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <App />\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}